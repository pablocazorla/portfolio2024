---
import { Picture } from "astro:assets";

interface Props {
  src: string;
  name: string;
  alt?: string;
  class?: string;
  notLazy?: boolean;
}

const { src, name, alt, class: className, notLazy } = Astro.props;

const imagePath = `/src/assets/img/${src}/${name}`;

const matches = await import.meta.glob(
  "/src/assets/img/**/*.{jpeg,jpg,png,gif,webp,svg}"
);

if (!matches[imagePath])
  throw new Error(
    `"${imagePath}" does not exist in glob: "/src/assets/img/**/*.{jpeg,jpg,png,gif,webp,svg}"`
  );

const image = matches[imagePath]();

const windowScale = [500, 800, 1300];
const scales = [400, 760, 900, 1300];

const sizes = scales
  .map((scale, i) => {
    if (i === scales.length - 1) {
      return `${scale}px`;
    }

    return `(max-width: ${windowScale[i]}) ${scale}px`;
  })
  .join(", ");

const loading = notLazy ? "eager" : "lazy";
---

<Picture
  src={image}
  widths={windowScale}
  sizes={sizes}
  alt={alt ?? ""}
  formats={["avif", "webp"]}
  class={className}
  loading={loading}
/>
