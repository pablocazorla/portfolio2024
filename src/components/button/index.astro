---
import getI18nText from "@/i18n/getI18nText";

const colorClasses = {
  github: {
    normal: "bg-gray-900 text-white hover:text-gray-900",
    hover: "bg-white",
  },
  linkedin: {
    normal: "bg-blue-600 text-white hover:text-blue-600",
    hover: "bg-white",
  },
  pdf: {
    normal: "bg-gray-100 text-red-600  hover:text-white",
    hover: "bg-red-600",
  },
  share: {
    normal: "bg-gray-100 text-green-500  hover:text-white",
    hover: "bg-green-500",
  },
  default: {
    normal: "bg-black text-white hover:text-white",
    hover: "bg-primary",
  },
  primary: {
    normal: "bg-primary text-white hover:text-primary",
    hover: "bg-white",
  },
  secondary: {
    normal: "bg-white text-gray-500 hover:text-white",
    hover: "bg-secondary",
  },
  dark: {
    normal: "bg-black text-white hover:text-black",
    hover: "bg-white",
  },
  "transparent-white": {
    normal: "bg-transparent border border-white text-white hover:text-black",
    hover: "bg-white",
  },
  "transparent-primary": {
    normal:
      "bg-transparent border border-white text-white hover:text-white hover:border-transparent",
    hover: "bg-primary",
  },
  "main-menu": {
    normal: "bg-transparent text-white hover:text-black",
    hover: "bg-white",
  },
};

const {
  type,
  href,
  color,
  target,
  circular,
  title,
  titlePosition,
  className,
  min,
  max,
  toLeft,
  es,
  ...rest
} = Astro.props;
---

{
  type === "button" ? (
    <button
      type="button"
      class={`btn-link ${min ? "h-[24px]" : "h-[60px]"} flex items-center justify-center rounded-full uppercase font-semibold ${
        min ? (circular ? "w-[24px]" : "px-3") : circular ? "w-[60px]" : "px-6"
      } ${colorClasses[color ?? "default"].normal} ${className} ${min ? "text-xs" : ""}`}
      {...rest}
    >
      <div class="btn-link-bg-wrap rounded-full">
        <div class={`btn-link-bg ${colorClasses[color ?? "default"].hover}`} />
      </div>

      <div class="relative flex items-center gap-1 btn-content">
        <slot />
      </div>
      {title ? (
        <div
          class={`btn-link-title ${titlePosition} bg-slate-900 text-white dark:bg-slate-200 dark:text-black`}
        >
          {getI18nText(title, es)}
        </div>
      ) : null}
    </button>
  ) : (
    <a
      href={href}
      class={`btn-link ${min ? "h-[24px]" : "h-[60px]"} flex items-center justify-${toLeft ? "start" : "center"} rounded-full uppercase font-semibold ${min ? (circular ? "w-[24px]" : "px-3") : circular ? "w-[60px]" : "px-6"} ${colorClasses[color ?? "default"].normal} ${className} ${min ? "text-xs" : ""}`}
      target={target ?? "_self"}
      {...rest}
    >
      <div class="btn-link-bg-wrap rounded-full">
        <div class={`btn-link-bg ${colorClasses[color ?? "default"].hover}`} />
      </div>

      <div class="relative flex items-center gap-1 btn-content">
        <slot />
      </div>
      {title ? (
        <div
          class={`btn-link-title ${titlePosition} bg-slate-900 text-white dark:bg-slate-200 dark:text-black`}
        >
          {getI18nText(title, es)}
        </div>
      ) : null}
    </a>
  )
}

<style>
  .btn-link {
    --duration: 0.24s;

    .btn-link-bg-wrap {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }

    .btn-link-bg {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0);
      width: 110%;
      aspect-ratio: 1 / 1;
      opacity: 0;
      transition:
        transform var(--duration) ease-out,
        opacity calc(var(--duration) * 2) ease-out;
      border-radius: 50%;
      display: block;
    }
    .btn-link-title {
      position: absolute;
      bottom: 95%;
      left: 50%;
      transform: translateX(-50%);
      font-size: 10px;
      padding: 4px 8px;
      border-radius: 4px;
      opacity: 0;
      pointer-events: none;

      &.toBottom {
        top: 95%;
        bottom: auto;
      }
    }

    &:hover {
      transition: color var(--duration) ease-out;

      .btn-link-bg {
        transform: translate(-50%, -50%) scale(1);
        opacity: 1;
      }

      .btn-link-title {
        bottom: 110%;
        opacity: 1;
        transition: all var(--duration) 0.1s ease-in-out;

        &.toBottom {
          top: 110%;
          bottom: auto;
        }
      }
      .btn-content {
        animation: btn-content-pulse 0.3s ease-out;
      }
    }
  }
  .btn-link:not(.absolute) {
    position: relative;
  }
</style>
